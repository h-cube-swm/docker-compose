version: "3.0"
services:
  # Reverse proxy를 구현하는 NGINX 서버
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - /srv/nginx/certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    ports:
      - 80:80
      - 443:443

  # Let's encrypt 자동화 컨테이너
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    depends_on:
      - nginx-proxy
    volumes:
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam:ro
      - acme:/etc/acme.sh
      - /srv/nginx/certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEFAULT_EMAIL=${EMAIL}
      - NGINX_PROXY_CONTAINER=nginx-proxy

  # 데이터베이스 대시보드
  dashboard:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
      - VIRTUAL_HOST=db.${HOST}
      - LETSENCRYPT_HOST=db.${HOST}
    expose:
      - 80

  # 프론트엔드 개발 서버
  frontend-dev:
    image: node:14
    environment:
      - VIRTUAL_HOST=dev.${HOST}
      - LETSENCRYPT_HOST=dev.${HOST}
    volumes:
      - /srv/server-frontend-dev/src:/app
    working_dir: /app
    entrypoint: ["yarn", "start"]
    expose:
      - 3000
    tty: true
    stdin_open: true
    restart: always

  # 프론트엔드 프로덕션 서버
  frontend:
    image: node:14
    environment:
      - VIRTUAL_HOST=${HOST}
      - LETSENCRYPT_HOST=${HOST}
    volumes:
      - /srv/server-frontend/src:/app
    working_dir: /app
    entrypoint: ["yarn", "start"]
    expose:
      - 3000
    tty: true
    stdin_open: true
    restart: always

  # 프론트엔드 상호작용 테스트 서버
  interaction:
    image: node:14
    environment:
      - VIRTUAL_HOST=interaction.${HOST}
      - LETSENCRYPT_HOST=interaction.${HOST}
    volumes:
      - /srv/server-interaction/src:/app
    working_dir: /app
    entrypoint: ["yarn", "start"]
    expose:
      - 3000
    tty: true
    stdin_open: true
    restart: always

  # 백엔드 api 서버
  gunicorn-backend:
    build: /srv/server-backend
    container_name: gunicorn-backend
    environment:
      - SECRET_KEY
      - DJANGO_SUPERUSER_USERNAME
      - DJANGO_SUPERUSER_PASSWORD
      - DJANGO_SUPERUSER_EMAIL
      - POSTGRES_USER_PRODUCTION
      - POSTGRES_PASSWORD_PRODUCTION
      - POSTGRES_DB_PRODUCTION
      - POSTGRES_HOST_PRODUCTION
      - MAILGUN_API_KEY
      - EMAIL_HOST
      - EMAIL_HOST_USER
      - EMAIL_HOST_PASSWORD
      - VIRTUAL_HOST=api.${HOST}
      - LETSENCRYPT_HOST=api.${HOST}
      - DEBUG
    volumes:
      - /srv/server-backend:/code
      - /srv/server-logging/gunicorn:/var/log/gunicorn_log
      - /srv/server-logging/django:/var/log/django_log
    expose:
      - 8000
    entrypoint: ["sh", "init.sh"]
    restart: always

  # CI/CD 서버
  cicd:
    image: node:14
    working_dir: /app/src
    environment:
      - VIRTUAL_HOST=cicd.${HOST}
      - LETSENCRYPT_HOST=cicd.${HOST}
    volumes:
      - /srv/server-cicd:/app
      - /srv/server-cicd/deploy-keys/:/root/.ssh
      - /srv/server-frontend:/frontend
    expose:
      - 8080
    entrypoint: ["node", "index.js"]

volumes:
  conf:
  vhost:
  html:
  dhparam:
  acme:
